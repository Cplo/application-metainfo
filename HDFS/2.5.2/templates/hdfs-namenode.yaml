<#assign
  registryServer=dependencies.REGISTRY.roles['REGISTRY_SERVER'][0].hostname
  registryPort=dependencies.REGISTRY[registryServer]['registry.port']
  >
<#--federation is true-->
<#if service.nameservices?? && service.nameservices?size gt 0>
<#list service.nameservices as ns>
<#--ha is enabled-->
    <#if service[ns]['HDFS_NAMENODE']?size gt 1>
    <#assign
        namenode1hostname=service[ns]['HDFS_NAMENODE'][0].hostname
        namenode2hostname=service[ns]['HDFS_NAMENODE'][1].hostname
        namenode1nodeid=service[ns]['HDFS_NAMENODE'][0].id
        namenode2nodeid=service[ns]['HDFS_NAMENODE'][1].id
    >
    </#if>
    <#if namenode2nodeid gt namenode1nodeid>
        <#assign minhostname=namenode1hostname >
    <#else>
        <#assign minhostname=namenode2hostname >
    </#if>
    <#if minhostname == localhostname>
        <#assign replication_job_id="'0'" >
    <#else>
        <#assign replication_job_id="'1'" >
    </#if>
</#list>
<#else>
<#--federation is false-->
</#if>
apiVersion: v1
kind: Pod
metadata:
  labels:
    name: hadoop-hdfs-namenode-${service.sid}-${localhostname}
  name: hadoop-hdfs-namenode-${service.sid}-${localhostname}
  namespace: default
spec:
  containers:
  - args:
    - bootstrap.sh
    - namenode
    env:
    - name: KRB_ENABLE
      value: 'false'
    - name: HADOOP_HA_NAMENODE_SERVICE
      value: ${namenode1hostname},${namenode2hostname}
    - name: HDFS_JOURNAL_NODE_SPEC
      value: valid
    - name: HDFS_HA
      value: 'true'
    - name: REPLICATION_JOB_ID
      value: ${replication_job_id}
    - name: SPEC
      value: ${localhostname}
    - name: HADOOP_CONF_DIR
      value: /etc/${service.sid}/conf
    - name: DATA_DIRS
      value: ${service['dfs.namenode.name.dir']}
    - name: HEAP_SIZE
      value: ${service['namenode.memory']}m
    - name: SOCKETDIR
      value: /var/run/${service.sid}
    image: ${registryServer}:${registryPort}/jenkins/hdfs
    imagePullPolicy: Always
    name: hadoop-hdfs-namenode-${service.sid}-${localhostname}
    volumeMounts:
    - mountPath: /etc/${service.sid}/conf
      name: hdfs
    - mountPath: /var/run/hadoop-common
      name: socketdir
    - mountPath: /var/transwarp/logs
      name: log
    - mountPath: /var/transwarp/data
      name: format
    - mountPath: /etc/transwarp/conf/
      name: topology
    - mountPath: /var/run/${service.sid}
      name: hdfssocketdir
<#list service['dfs.namenode.name.dir']?split(",") as datadir>
    - mountPath: ${datadir?trim}
      name: namenodedir${datadir_index}
</#list>
  - args:
    - bootstrap.sh
    - zkfc
    env:
    - name: HDFS_HA
      value: 'true'
    - name: KRB_ENABLE
      value: 'false'
    - name: HADOOP_HA_NAMENODE_SERVICE
      value: ${namenode1hostname},${namenode2hostname}
    - name: CLUSTER
      value: ${service.sid}
    - name: HDFS_JOURNAL_NODE_SPEC
      value: valid
    - name: HADOOP_CONF_DIR
      value: /etc/${service.sid}/conf
    image: ${registryServer}:${registryPort}/jenkins/hdfs
    imagePullPolicy: Always
    name: zkfc
    volumeMounts:
    - mountPath: /etc/${service.sid}/conf
      name: hdfs
    - mountPath: /var/run/hadoop-common
      name: socketdir
    - mountPath: /var/transwarp/logs
      name: log
  hostNetwork: true
  nodeName: ${localhostname}
  volumes:
  - hostPath:
      path: /var/log/${service.sid}
    name: log
  - hostPath:
      path: /etc/${service.sid}/conf
    name: hdfs
  - hostPath:
      path: /root/docker/common
    name: socketdir
  - hostPath:
      path: /var/namenode_format/
    name: format
  - hostPath:
      path: /etc/transwarp/conf/
    name: topology
  - hostPath:
      path: /var/run/${service.sid}
    name: hdfssocketdir
<#list service['dfs.namenode.name.dir']?split(",") as datadir>
  - hostPath:
      path: ${datadir?trim}
    name: namenodedir${datadir_index}
</#list>
