#!/bin/sh
#
# elasticsearch <summary>
#
# chkconfig:   2345 80 20
# description: Starts and stops a single elasticsearch instance on this system 
#

### BEGIN INIT INFO
# Provides: Elasticsearch
# Required-Start: $network $named
# Required-Stop: $network $named
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: This service manages the elasticsearch daemon
# Description: Elasticsearch is a very scalable, schema-free and high-performance search solution supporting multi-tenancy and near realtime search.
### END INIT INFO

#
# init.d / servicectl compatibility (openSUSE)
#
if [ -f /etc/rc.status ]; then
  . /etc/rc.status
  rc_reset
fi

#
# Source function library.
#
# centos
if [ -f /etc/rc.d/init.d/functions ]; then
  . /etc/rc.d/init.d/functions
fi
# suse
if [ -f /lib/lsb/init-functions ]; then
  . /lib/lsb/init-functions
fi
# sed by bootstrap
CONF_DIR="/etc/elasticsearch/conf"

# source the default env file
ES_ENV_FILE="$CONF_DIR/elasticsearch-env"
if [ -f "$ES_ENV_FILE" ]; then
    . "$ES_ENV_FILE"
fi


exec="$ES_HOME/bin/elasticsearch"
start_log_file="$LOG_DIR/start.log"
prog="elasticsearch"
pidfile="$PID_DIR/${prog}.pid"

STATUS_RUNNING=0
STATUS_DEAD=1
STATUS_DEAD_AND_LOCK=2
STATUS_NOT_RUNNING=3

lockfile=/var/lock/subsys/$prog

# backwards compatibility for old config sysconfig files, pre 0.90.1
if [ -n $USER ] && [ -z $ES_USER ] ; then 
   ES_USER=$USER
fi

checkJava() {
  if [ -x "$JAVA_HOME/bin/java" ]; then
    JAVA="$JAVA_HOME/bin/java"
  else
    JAVA=`which java`
  fi

  if [ ! -x "$JAVA" ]; then
    echo "Could not find any executable java binary. Please install java in your PATH or set JAVA_HOME"
    exit 1
  fi
}

start() {
  checkJava

  # check real startup script
  if [ ! -x "$exec" ]; then
    echo "Could not find the executable elasticsearch startup script."
    exit 5
  fi

#  if [ -n "$MAX_LOCKED_MEMORY" -a -z "$ES_HEAP_SIZE" ]; then
#    echo "MAX_LOCKED_MEMORY is set - ES_HEAP_SIZE must also be set"
#    return 7
#  fi
#
#  if [ -n "$MAX_OPEN_FILES" ]; then
#    ulimit -n $MAX_OPEN_FILES
#  fi
#
#  if [ -n "$MAX_LOCKED_MEMORY" ]; then
#    ulimit -l $MAX_LOCKED_MEMORY
#  fi
#
#  if [ -n "$MAX_MAP_COUNT" ]; then
#    sysctl -q -w vm.max_map_count=$MAX_MAP_COUNT
#  fi

  # Ensure that the PID_DIR exists (it is cleaned at OS startup time)
  if [ -n "$PID_DIR" ] && [ ! -e "$PID_DIR" ]; then
      mkdir -p "$PID_DIR" && chown "$ES_USER":"$ES_GROUP" "$PID_DIR"
  fi
  if [ -n "$pidfile" ] && [ ! -e "$pidfile" ]; then
      touch "$pidfile" && chown "$ES_USER":"$ES_GROUP" "$pidfile"
  fi

  cd $ES_HOME
  echo -n "Starting "$prog": "
  # if not running, start it up here, usually something like "daemon $exec"
  # SUSE uses startproc to daemonize processes
#  if [ -x /sbin/startproc ]; then
#    /sbin/startproc -u $ES_USER -s -l $start_log_file -p $pidfile $exec -d -p $pidfile -Des.default.path.home=$ES_HOME -Des.default.path.logs=$LOG_DIR -Des.default.path.data=$DATA_DIR -Des.default.path.conf=$CONF_DIR
#  else
#    daemon --user $ES_USER --pidfile $pidfile $exec -p $pidfile -d -Des.default.path.home=$ES_HOME -Des.default.path.logs=$LOG_DIR -Des.default.path.data=$DATA_DIR -Des.default.path.conf=$CONF_DIR
#  fi

  # for start service in docker container, not use daemon way.
  sudo -u $ES_USER  $exec -p $pidfile -Des.default.path.home=$ES_HOME -Des.default.path.logs=$LOG_DIR -Des.default.path.data=$DATA_DIR -Des.default.path.conf=$CONF_DIR

  retval=$?
  echo
  [ $retval -eq 0 ] && touch $lockfile
  return $retval
}

stop() {
  echo -n "Stopping "$prog": "
  # stop it here, often "killproc $prog"
  if [ -f /etc/SuSE-release ]; then
    killproc -p $pidfile -t20 $JAVA
  else
    killproc -p $pidfile -d 86400 $prog
  fi
  retval=$?
  echo
  [ $retval -eq 0 ] && rm -f $lockfile
  return $retval
}

restart() {
  stop
  start
}

reload() {
  restart
}

force_reload() {
  restart
}

rh_status() {
  # run checks to determine if the service is running or use generic status
  if [ -r /etc/rc.status ]; then
    # suse
    checkproc -p $pidfile $JAVA
    status=$?

    case "$status" in
    $STATUS_RUNNING)
      log_success_msg "elasticsearch is running"
      ;;
    $STATUS_DEAD)
      log_failure_msg "elasticsearch is dead and pid file exists"
      ;;
    $STATUS_DEAD_AND_LOCK)
      log_failure_msg "elasticsearch is dead and lock file exists"
      ;;
    $STATUS_NOT_RUNNING)
      log_failure_msg "elasticsearch is not running"
      ;;
    *)
      log_failure_msg "elasticsearch status is unknown"
      ;;
    esac
    return $status
  else
    # centos
    status -p $pidfile $prog
  fi
}

rh_status_q() {
  rh_status >/dev/null 2>&1
}


case "$1" in
  start)
    rh_status_q && exit 0
    $1
    ;;
  stop)
    rh_status_q || exit 0
    $1
    ;;
  restart)
    $1
    ;;
  reload)
    rh_status_q || exit 7
    $1
    ;;
  force-reload)
    force_reload
    ;;
  status)
    rh_status
    ;;
  condrestart|try-restart)
    rh_status_q || exit 0
    restart
    ;;
  *)
    echo "Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload}"
    exit 2
esac
exit $?
