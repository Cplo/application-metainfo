---
name: YARN
version: 2.5.2-tdh50
global: false
namePrefix: YARN
friendlyName: "YARN"
dockerImage: "transwarp/yarn:tdh500"
dependencies:
  - name: ZOOKEEPER
    minVersion: 3.4.5-tdh50
    maxVersion: 3.4.5-tdh50
    optional: false
  - name: HDFS
    minVersion: 2.5.2-tdh50
    maxVersion: 2.5.2-tdh50
    optional: false
user: yarn
roles:
- name: YARN_RESOURCEMANAGER
  friendlyName: "Resource Manager"
  labelPrefix: "hadoop-yarn-resourcemanager"
  linkExpression: "http://${localhostname}:${service['resourcemanager.webapp.port']}/"
  category: MASTER
  frontendOperations: ["Start", "Stop", "Delete", "Move", "Scaleout"]
  env:
  - name: HADOOP_CONF_DIR
    value: /etc/${service.sid}/conf
  mountPaths:
  - mountPath: /etc/${service.sid}/conf
    hostPath: /etc/${service.sid}/conf
    name: yarn
  - mountPath: /var/log/${service.sid}
    hostPath: /var/log/${service.sid}
    name: log
  - mountPath: /var/transwarp
    hostPath: /var/${service.sid}
    name: transwarp
  - mountPath: /etc/${dependencies.HDFS.sid}/conf
    hostPath: /etc/${dependencies.HDFS.sid}/conf
    name: hdfs
  - mountPath: /etc/transwarp/conf
    hostPath: /etc/transwarp/conf
    name: hosts
  summaryPolicy: SOME
  autoAssign:
  - advice: !<NumSeq> {"numSeq": [1]}
  suggestion:
  - criteria: !<Range> {"min": 1}
  validation:
  - criteria: !<Range> {"min": 1}
  operations:
  - type: Install
    directives:
    - directive: !<mkdirs>
        paths: ["/etc/${service.sid}/conf", "/var/lock/subsys/${service.sid}", "/var/log/${service.sid}", "/var/run/${service.sid}"]
        mode: "755"
  - type: Config
    directives:
#    - directive: !<link>
#        action: Link
#        from: "/etc/${dependencies.HDFS.sid}/conf/hdfs-site.xml"
#        to: "/etc/${service.sid}/conf/hdfs-site.xml"
#    - directive: !<link>
#        action: Link
#        from: "/etc/${dependencies.HDFS.sid}/conf/core-site.xml"
#        to: "/etc/${service.sid}/conf/core-site.xml"
    - directive: !<resource>
        templateType: Raw
        templatePath: "hadoop-metrics2-resourcemanager.properties"
        targetPath: "/etc/${service.sid}/conf/hadoop-metrics2-resourcemanager.properties"
        mode: "644"
- name: YARN_NODEMANAGER
  friendlyName: "Node Manager"
  labelPrefix: "hadoop-yarn-nodemanager"
  linkExpression: "http://${service['yarn.nodemanager.webapp.address']?replace(r'${yarn.nodemanager.hostname}', localhostname)}/"
  category: SLAVE
  frontendOperations: ["Start", "Stop", "Commission", "Decommission", "Delete", "Scaleout"]
  env:
  - name: HADOOP_CONF_DIR
    value: /etc/${service.sid}/conf
  mountPaths:
  - mountPath: /etc/${service.sid}/conf
    hostPath: /etc/${service.sid}/conf
    name: yarn
  - mountPath: /var/log/${service.sid}
    hostPath: /var/log/${service.sid}
    name: log
  - mountPath: /var/transwarp
    hostPath: /var/${service.sid}
    name: transwarp
  - mountPath: /etc/${dependencies.HDFS.sid}/conf
    hostPath: /etc/${dependencies.HDFS.sid}/conf
    name: hdfs
  - mountPath: /etc/transwarp/conf
    hostPath: /etc/transwarp/conf
    name: hosts
  nodeSpecificMounts:
  - configKey: yarn.nodemanager.local-dirs
  - configKey: yarn.nodemanager.log-dirs
  summaryPolicy: SOME
  autoAssign:
  - advice: !<EachNode> {}
  suggestion:
  - criteria: !<EachNode> {}
  validation:
  - criteria: !<EachNode> {}
  operations:
  - type: Install
    directives:
    - directive: !<mkdirs>
        paths: ["/etc/${service.sid}/conf", "/var/lock/subsys/${service.sid}", "/var/log/${service.sid}", "/var/run/${service.sid}"]
        mode: "755"
  - type: Config
    directives:
    - directive: !<resource>
        templateType: Raw
        templatePath: "hadoop-metrics2-nodemanager.properties"
        targetPath: "/etc/${service.sid}/conf/hadoop-metrics2-nodemanager.properties"
        mode: "644"
- name: YARN_HISTORYSERVER
  friendlyName: "History Server"
  labelPrefix: "hadoop-yarn-historyserver"
  category: MASTER
  frontendOperations: ["Start", "Stop", "Delete", "Scaleout"]
  env:
  - name: HDFS_HA_NAMENODE_SERVICE
    value: |
      <#assign namenodes=[]>
      <#if dependencies.HDFS.nameservices?? && dependencies.HDFS.nameservices?size gt 0>
        <#list dependencies.HDFS.nameservices as ns>
          <#list dependencies.HDFS[ns]['HDFS_NAMENODE'] as namenode>
            <#assign namenodes += [namenode.hostname]>
          </#list>
        </#list>
      <#else>
        <#assign namenodes += dependencies.HDFS.roles.HDFS_NAMENODE[0]['hostname']>
      </#if>
      ${namenodes?join(",")}
  - name: HADOOP_CONF_DIR
    value: /etc/${service.sid}/conf
  mountPaths:
  - mountPath: /etc/${service.sid}/conf
    hostPath: /etc/${service.sid}/conf
    name: yarn
  - mountPath: /var/log/${service.sid}
    hostPath: /var/log/${service.sid}
    name: log
  - mountPath: /var/transwarp
    hostPath: /var/${service.sid}
    name: transwarp
  - mountPath: /etc/${dependencies.HDFS.sid}/conf
    hostPath: /etc/${dependencies.HDFS.sid}/conf
    name: hdfs
  - mountPath: /etc/transwarp/conf
    hostPath: /etc/transwarp/conf
    name: hosts
  summaryPolicy: SOME
  autoAssign:
  - advice: !<NumSeq> {"numSeq": [1]}
  suggestion:
  - criteria: !<Range> {"min": 1}
  validation:
  - criteria: !<Range> {"min": 1}
  operations:
  - type: Install
    directives:
    - directive: !<mkdirs>
        paths: ["/etc/${service.sid}/conf", "/var/lock/subsys/${service.sid}", "/var/log/${service.sid}", "/var/run/${service.sid}"]
        mode: "755"
  - type: Config
    directives:
    - directive: !<resource>
        templateType: Raw
        templatePath: "hadoop-metrics2-historyserver.properties"
        targetPath: "/etc/${service.sid}/conf/hadoop-metrics2-historyserver.properties"
        mode: "644"
- name: YARN_TIMELINESERVER
  friendlyName: "Timeline Server"
  labelPrefix: "hadoop-yarn-timelineserver"
  category: MASTER
  frontendOperations: ["Start", "Stop", "Delete", "Scaleout"]
  env:
  - name: HADOOP_CONF_DIR
    value: /etc/${service.sid}/conf
  - name: HDFS_HA_NAMENODE_SERVICE
    value: |
      <#assign namenodes=[]>
      <#if dependencies.HDFS.nameservices?? && dependencies.HDFS.nameservices?size gt 0>
        <#list dependencies.HDFS.nameservices as ns>
          <#list dependencies.HDFS[ns]['HDFS_NAMENODE'] as namenode>
            <#assign namenodes += [namenode.hostname]>
          </#list>
        </#list>
      <#else>
        <#assign namenodes += dependencies.HDFS.roles.HDFS_NAMENODE[0]['hostname']>
      </#if>
      ${namenodes?join(",")}
  mountPaths:
  - mountPath: /etc/${service.sid}/conf
    hostPath: /etc/${service.sid}/conf
    name: yarn
  - mountPath: /var/log/${service.sid}
    hostPath: /var/log/${service.sid}
    name: log
  - mountPath: /var/transwarp
    hostPath: /var/${service.sid}
    name: transwarp
  - mountPath: /etc/${dependencies.HDFS.sid}/conf
    hostPath: /etc/${dependencies.HDFS.sid}/conf
    name: hdfs
  - mountPath: /etc/transwarp/conf
    hostPath: /etc/transwarp/conf
    name: hosts
  summaryPolicy: SOME
  autoAssign:
  - advice: !<NumSeq> {"numSeq": [1]}
  suggestion:
  - criteria: !<Range> {"min": 1}
  validation:
  - criteria: !<Range> {"min": 1}
  operations:
  - type: Install
    directives:
    - directive: !<mkdirs>
        paths: ["/etc/${service.sid}/conf", "/var/lock/subsys/${service.sid}", "/var/log/${service.sid}", "/var/run/${service.sid}"]
        mode: "755"
stages:
  - type: Bootstrap
    taskGroups:
    - !<Create-Dir-in-HDFS>
      summaryPolicy: ALL
      timeoutMinutes: 10
      dirs: ["/tmp" , "/user"]
      user: "hdfs"
      group: "hadoop"
      mod: 777
    - !<Create-Dir-in-HDFS>
      summaryPolicy: ALL
      timeoutMinutes: 10
      dirs: ["/${service.sid}/user" , "/${service.sid}/user/history", "/${service.sid}/var/log/hadoop-yarn/apps"]
      user: "yarn"
      group: "hadoop"
      mod: 777

product: Hadoop

firstWizardConfigs:
- yarn.nodemanager.local-dirs
- yarn.nodemanager.log-dirs
- yarn.nodemanager.remote-app-log-dir
- yarn.app.mapreduce.am.staging-dir
- resourcemanager.admin.port
- resourcemanager.port
- resourcemanager.resource-tracker.port
- resourcemanager.scheduler.port
- resourcemanager.webapp.port
- yarn.nodemanager.resource.cpu-vcores
- yarn.nodemanager.resource.memory-mb
- timelineserver.port
- timelineserver.http.port
- mapred.child.heapsize

dashboardMetrics:
- YarnVCoreUsage
- YarnMemoryUsage

pages:
- summary
- roles
- configuration
- operation
- resource_management
- security

healthChecks:
- category: DAEMON_CHECK
  intervalSeconds: 5
  method: !<K8sPod> {}
- category: VITAL_SIGN_CHECK
  intervalSeconds: 10
  method: !<Builtin> {}
